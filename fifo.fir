circuit fifo :
  module BinToGray :
    input clock : Clock
    input reset : Reset
    output io : { flip bin : UInt<32>, gray : UInt<32>}

    node _io_gray_T = dshr(io.bin, UInt<1>("h1")) @[GCD.scala 114:47]
    node _io_gray_T_1 = xor(io.bin, _io_gray_T) @[GCD.scala 114:30]
    io.gray <= _io_gray_T_1 @[GCD.scala 114:13]

  module GrayToBin :
    input clock : Clock
    input reset : Reset
    output io : { bin : UInt<32>, flip gray : UInt<32>}

    wire binary : UInt<1>[32] @[GCD.scala 122:22]
    node _binary_31_T = bits(io.gray, 31, 31) @[GCD.scala 123:38]
    binary[31] <= _binary_31_T @[GCD.scala 123:21]
    node _binary_30_T = bits(io.gray, 30, 30) @[GCD.scala 125:40]
    node _binary_30_T_1 = xor(_binary_30_T, binary[31]) @[GCD.scala 125:50]
    binary[30] <= _binary_30_T_1 @[GCD.scala 125:23]
    node _binary_29_T = bits(io.gray, 29, 29) @[GCD.scala 125:40]
    node _binary_29_T_1 = xor(_binary_29_T, binary[30]) @[GCD.scala 125:50]
    binary[29] <= _binary_29_T_1 @[GCD.scala 125:23]
    node _binary_28_T = bits(io.gray, 28, 28) @[GCD.scala 125:40]
    node _binary_28_T_1 = xor(_binary_28_T, binary[29]) @[GCD.scala 125:50]
    binary[28] <= _binary_28_T_1 @[GCD.scala 125:23]
    node _binary_27_T = bits(io.gray, 27, 27) @[GCD.scala 125:40]
    node _binary_27_T_1 = xor(_binary_27_T, binary[28]) @[GCD.scala 125:50]
    binary[27] <= _binary_27_T_1 @[GCD.scala 125:23]
    node _binary_26_T = bits(io.gray, 26, 26) @[GCD.scala 125:40]
    node _binary_26_T_1 = xor(_binary_26_T, binary[27]) @[GCD.scala 125:50]
    binary[26] <= _binary_26_T_1 @[GCD.scala 125:23]
    node _binary_25_T = bits(io.gray, 25, 25) @[GCD.scala 125:40]
    node _binary_25_T_1 = xor(_binary_25_T, binary[26]) @[GCD.scala 125:50]
    binary[25] <= _binary_25_T_1 @[GCD.scala 125:23]
    node _binary_24_T = bits(io.gray, 24, 24) @[GCD.scala 125:40]
    node _binary_24_T_1 = xor(_binary_24_T, binary[25]) @[GCD.scala 125:50]
    binary[24] <= _binary_24_T_1 @[GCD.scala 125:23]
    node _binary_23_T = bits(io.gray, 23, 23) @[GCD.scala 125:40]
    node _binary_23_T_1 = xor(_binary_23_T, binary[24]) @[GCD.scala 125:50]
    binary[23] <= _binary_23_T_1 @[GCD.scala 125:23]
    node _binary_22_T = bits(io.gray, 22, 22) @[GCD.scala 125:40]
    node _binary_22_T_1 = xor(_binary_22_T, binary[23]) @[GCD.scala 125:50]
    binary[22] <= _binary_22_T_1 @[GCD.scala 125:23]
    node _binary_21_T = bits(io.gray, 21, 21) @[GCD.scala 125:40]
    node _binary_21_T_1 = xor(_binary_21_T, binary[22]) @[GCD.scala 125:50]
    binary[21] <= _binary_21_T_1 @[GCD.scala 125:23]
    node _binary_20_T = bits(io.gray, 20, 20) @[GCD.scala 125:40]
    node _binary_20_T_1 = xor(_binary_20_T, binary[21]) @[GCD.scala 125:50]
    binary[20] <= _binary_20_T_1 @[GCD.scala 125:23]
    node _binary_19_T = bits(io.gray, 19, 19) @[GCD.scala 125:40]
    node _binary_19_T_1 = xor(_binary_19_T, binary[20]) @[GCD.scala 125:50]
    binary[19] <= _binary_19_T_1 @[GCD.scala 125:23]
    node _binary_18_T = bits(io.gray, 18, 18) @[GCD.scala 125:40]
    node _binary_18_T_1 = xor(_binary_18_T, binary[19]) @[GCD.scala 125:50]
    binary[18] <= _binary_18_T_1 @[GCD.scala 125:23]
    node _binary_17_T = bits(io.gray, 17, 17) @[GCD.scala 125:40]
    node _binary_17_T_1 = xor(_binary_17_T, binary[18]) @[GCD.scala 125:50]
    binary[17] <= _binary_17_T_1 @[GCD.scala 125:23]
    node _binary_16_T = bits(io.gray, 16, 16) @[GCD.scala 125:40]
    node _binary_16_T_1 = xor(_binary_16_T, binary[17]) @[GCD.scala 125:50]
    binary[16] <= _binary_16_T_1 @[GCD.scala 125:23]
    node _binary_15_T = bits(io.gray, 15, 15) @[GCD.scala 125:40]
    node _binary_15_T_1 = xor(_binary_15_T, binary[16]) @[GCD.scala 125:50]
    binary[15] <= _binary_15_T_1 @[GCD.scala 125:23]
    node _binary_14_T = bits(io.gray, 14, 14) @[GCD.scala 125:40]
    node _binary_14_T_1 = xor(_binary_14_T, binary[15]) @[GCD.scala 125:50]
    binary[14] <= _binary_14_T_1 @[GCD.scala 125:23]
    node _binary_13_T = bits(io.gray, 13, 13) @[GCD.scala 125:40]
    node _binary_13_T_1 = xor(_binary_13_T, binary[14]) @[GCD.scala 125:50]
    binary[13] <= _binary_13_T_1 @[GCD.scala 125:23]
    node _binary_12_T = bits(io.gray, 12, 12) @[GCD.scala 125:40]
    node _binary_12_T_1 = xor(_binary_12_T, binary[13]) @[GCD.scala 125:50]
    binary[12] <= _binary_12_T_1 @[GCD.scala 125:23]
    node _binary_11_T = bits(io.gray, 11, 11) @[GCD.scala 125:40]
    node _binary_11_T_1 = xor(_binary_11_T, binary[12]) @[GCD.scala 125:50]
    binary[11] <= _binary_11_T_1 @[GCD.scala 125:23]
    node _binary_10_T = bits(io.gray, 10, 10) @[GCD.scala 125:40]
    node _binary_10_T_1 = xor(_binary_10_T, binary[11]) @[GCD.scala 125:50]
    binary[10] <= _binary_10_T_1 @[GCD.scala 125:23]
    node _binary_9_T = bits(io.gray, 9, 9) @[GCD.scala 125:40]
    node _binary_9_T_1 = xor(_binary_9_T, binary[10]) @[GCD.scala 125:50]
    binary[9] <= _binary_9_T_1 @[GCD.scala 125:23]
    node _binary_8_T = bits(io.gray, 8, 8) @[GCD.scala 125:40]
    node _binary_8_T_1 = xor(_binary_8_T, binary[9]) @[GCD.scala 125:50]
    binary[8] <= _binary_8_T_1 @[GCD.scala 125:23]
    node _binary_7_T = bits(io.gray, 7, 7) @[GCD.scala 125:40]
    node _binary_7_T_1 = xor(_binary_7_T, binary[8]) @[GCD.scala 125:50]
    binary[7] <= _binary_7_T_1 @[GCD.scala 125:23]
    node _binary_6_T = bits(io.gray, 6, 6) @[GCD.scala 125:40]
    node _binary_6_T_1 = xor(_binary_6_T, binary[7]) @[GCD.scala 125:50]
    binary[6] <= _binary_6_T_1 @[GCD.scala 125:23]
    node _binary_5_T = bits(io.gray, 5, 5) @[GCD.scala 125:40]
    node _binary_5_T_1 = xor(_binary_5_T, binary[6]) @[GCD.scala 125:50]
    binary[5] <= _binary_5_T_1 @[GCD.scala 125:23]
    node _binary_4_T = bits(io.gray, 4, 4) @[GCD.scala 125:40]
    node _binary_4_T_1 = xor(_binary_4_T, binary[5]) @[GCD.scala 125:50]
    binary[4] <= _binary_4_T_1 @[GCD.scala 125:23]
    node _binary_3_T = bits(io.gray, 3, 3) @[GCD.scala 125:40]
    node _binary_3_T_1 = xor(_binary_3_T, binary[4]) @[GCD.scala 125:50]
    binary[3] <= _binary_3_T_1 @[GCD.scala 125:23]
    node _binary_2_T = bits(io.gray, 2, 2) @[GCD.scala 125:40]
    node _binary_2_T_1 = xor(_binary_2_T, binary[3]) @[GCD.scala 125:50]
    binary[2] <= _binary_2_T_1 @[GCD.scala 125:23]
    node _binary_1_T = bits(io.gray, 1, 1) @[GCD.scala 125:40]
    node _binary_1_T_1 = xor(_binary_1_T, binary[2]) @[GCD.scala 125:50]
    binary[1] <= _binary_1_T_1 @[GCD.scala 125:23]
    node _binary_0_T = bits(io.gray, 0, 0) @[GCD.scala 125:40]
    node _binary_0_T_1 = xor(_binary_0_T, binary[1]) @[GCD.scala 125:50]
    binary[0] <= _binary_0_T_1 @[GCD.scala 125:23]
    node io_bin_lo_lo_lo_lo = cat(binary[1], binary[0]) @[GCD.scala 127:28]
    node io_bin_lo_lo_lo_hi = cat(binary[3], binary[2]) @[GCD.scala 127:28]
    node io_bin_lo_lo_lo = cat(io_bin_lo_lo_lo_hi, io_bin_lo_lo_lo_lo) @[GCD.scala 127:28]
    node io_bin_lo_lo_hi_lo = cat(binary[5], binary[4]) @[GCD.scala 127:28]
    node io_bin_lo_lo_hi_hi = cat(binary[7], binary[6]) @[GCD.scala 127:28]
    node io_bin_lo_lo_hi = cat(io_bin_lo_lo_hi_hi, io_bin_lo_lo_hi_lo) @[GCD.scala 127:28]
    node io_bin_lo_lo = cat(io_bin_lo_lo_hi, io_bin_lo_lo_lo) @[GCD.scala 127:28]
    node io_bin_lo_hi_lo_lo = cat(binary[9], binary[8]) @[GCD.scala 127:28]
    node io_bin_lo_hi_lo_hi = cat(binary[11], binary[10]) @[GCD.scala 127:28]
    node io_bin_lo_hi_lo = cat(io_bin_lo_hi_lo_hi, io_bin_lo_hi_lo_lo) @[GCD.scala 127:28]
    node io_bin_lo_hi_hi_lo = cat(binary[13], binary[12]) @[GCD.scala 127:28]
    node io_bin_lo_hi_hi_hi = cat(binary[15], binary[14]) @[GCD.scala 127:28]
    node io_bin_lo_hi_hi = cat(io_bin_lo_hi_hi_hi, io_bin_lo_hi_hi_lo) @[GCD.scala 127:28]
    node io_bin_lo_hi = cat(io_bin_lo_hi_hi, io_bin_lo_hi_lo) @[GCD.scala 127:28]
    node io_bin_lo = cat(io_bin_lo_hi, io_bin_lo_lo) @[GCD.scala 127:28]
    node io_bin_hi_lo_lo_lo = cat(binary[17], binary[16]) @[GCD.scala 127:28]
    node io_bin_hi_lo_lo_hi = cat(binary[19], binary[18]) @[GCD.scala 127:28]
    node io_bin_hi_lo_lo = cat(io_bin_hi_lo_lo_hi, io_bin_hi_lo_lo_lo) @[GCD.scala 127:28]
    node io_bin_hi_lo_hi_lo = cat(binary[21], binary[20]) @[GCD.scala 127:28]
    node io_bin_hi_lo_hi_hi = cat(binary[23], binary[22]) @[GCD.scala 127:28]
    node io_bin_hi_lo_hi = cat(io_bin_hi_lo_hi_hi, io_bin_hi_lo_hi_lo) @[GCD.scala 127:28]
    node io_bin_hi_lo = cat(io_bin_hi_lo_hi, io_bin_hi_lo_lo) @[GCD.scala 127:28]
    node io_bin_hi_hi_lo_lo = cat(binary[25], binary[24]) @[GCD.scala 127:28]
    node io_bin_hi_hi_lo_hi = cat(binary[27], binary[26]) @[GCD.scala 127:28]
    node io_bin_hi_hi_lo = cat(io_bin_hi_hi_lo_hi, io_bin_hi_hi_lo_lo) @[GCD.scala 127:28]
    node io_bin_hi_hi_hi_lo = cat(binary[29], binary[28]) @[GCD.scala 127:28]
    node io_bin_hi_hi_hi_hi = cat(binary[31], binary[30]) @[GCD.scala 127:28]
    node io_bin_hi_hi_hi = cat(io_bin_hi_hi_hi_hi, io_bin_hi_hi_hi_lo) @[GCD.scala 127:28]
    node io_bin_hi_hi = cat(io_bin_hi_hi_hi, io_bin_hi_hi_lo) @[GCD.scala 127:28]
    node io_bin_hi = cat(io_bin_hi_hi, io_bin_hi_lo) @[GCD.scala 127:28]
    node _io_bin_T = cat(io_bin_hi, io_bin_lo) @[GCD.scala 127:28]
    io.bin <= _io_bin_T @[GCD.scala 127:12]

  module fifo :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip write : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip rst_w : UInt<1>, flip clk_w : Clock, read : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip rst_r : UInt<1>, flip clk_r : Clock}

    cmem mem : UInt<32> [8] @[GCD.scala 19:16]
    reg rd_ptr : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[GCD.scala 20:23]
    reg wr_ptr : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[GCD.scala 21:23]
    reg wr_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[GCD.scala 22:24]
    reg rd_empty : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[GCD.scala 23:25]
    reg rd_en : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[GCD.scala 24:22]
    reg wr_en : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[GCD.scala 25:22]
    io.read.valid <= UInt<1>("h0") @[GCD.scala 28:17]
    io.read.bits <= UInt<1>("h0") @[GCD.scala 29:16]
    io.write.ready <= UInt<1>("h0") @[GCD.scala 30:18]
    wire _WIRE : UInt<32> @[GCD.scala 33:39]
    _WIRE <= UInt<1>("h0") @[GCD.scala 33:39]
    write mport MPORT = mem[UInt<1>("h0")], clock
    MPORT <= _WIRE
    wire _WIRE_1 : UInt<32> @[GCD.scala 33:39]
    _WIRE_1 <= UInt<1>("h0") @[GCD.scala 33:39]
    write mport MPORT_1 = mem[UInt<1>("h1")], clock
    MPORT_1 <= _WIRE_1
    wire _WIRE_2 : UInt<32> @[GCD.scala 33:39]
    _WIRE_2 <= UInt<1>("h0") @[GCD.scala 33:39]
    write mport MPORT_2 = mem[UInt<2>("h2")], clock
    MPORT_2 <= _WIRE_2
    wire _WIRE_3 : UInt<32> @[GCD.scala 33:39]
    _WIRE_3 <= UInt<1>("h0") @[GCD.scala 33:39]
    write mport MPORT_3 = mem[UInt<2>("h3")], clock
    MPORT_3 <= _WIRE_3
    wire _WIRE_4 : UInt<32> @[GCD.scala 33:39]
    _WIRE_4 <= UInt<1>("h0") @[GCD.scala 33:39]
    write mport MPORT_4 = mem[UInt<3>("h4")], clock
    MPORT_4 <= _WIRE_4
    wire _WIRE_5 : UInt<32> @[GCD.scala 33:39]
    _WIRE_5 <= UInt<1>("h0") @[GCD.scala 33:39]
    write mport MPORT_5 = mem[UInt<3>("h5")], clock
    MPORT_5 <= _WIRE_5
    wire _WIRE_6 : UInt<32> @[GCD.scala 33:39]
    _WIRE_6 <= UInt<1>("h0") @[GCD.scala 33:39]
    write mport MPORT_6 = mem[UInt<3>("h6")], clock
    MPORT_6 <= _WIRE_6
    wire _WIRE_7 : UInt<32> @[GCD.scala 33:39]
    _WIRE_7 <= UInt<1>("h0") @[GCD.scala 33:39]
    write mport MPORT_7 = mem[UInt<3>("h7")], clock
    MPORT_7 <= _WIRE_7
    node _T = eq(io.rst_r, UInt<1>("h1")) @[GCD.scala 38:20]
    when _T : @[GCD.scala 38:32]
      rd_ptr <= UInt<1>("h0") @[GCD.scala 39:14]
    node _T_1 = lt(rd_ptr, wr_ptr) @[GCD.scala 42:19]
    node _T_2 = eq(rd_empty, UInt<1>("h0")) @[GCD.scala 42:42]
    node _T_3 = and(_T_1, _T_2) @[GCD.scala 42:29]
    node _T_4 = eq(rd_en, UInt<1>("h1")) @[GCD.scala 42:64]
    node _T_5 = and(_T_3, _T_4) @[GCD.scala 42:54]
    when _T_5 : @[GCD.scala 42:77]
      node _rd_ptr_T = add(rd_ptr, UInt<1>("h1")) @[GCD.scala 43:24]
      node _rd_ptr_T_1 = tail(_rd_ptr_T, 1) @[GCD.scala 43:24]
      rd_ptr <= _rd_ptr_T_1 @[GCD.scala 43:14]
    else :
      rd_ptr <= rd_ptr @[GCD.scala 45:14]
    reg wr_ptr1 : UInt, io.clk_r with :
      reset => (UInt<1>("h0"), wr_ptr1) @[GCD.scala 48:30]
    wr_ptr1 <= wr_ptr @[GCD.scala 48:30]
    reg wr_ptr_r : UInt, io.clk_r with :
      reset => (UInt<1>("h0"), wr_ptr_r) @[GCD.scala 49:27]
    wr_ptr_r <= wr_ptr1 @[GCD.scala 49:27]
    node _T_6 = leq(rd_ptr, wr_ptr_r) @[GCD.scala 51:19]
    node _T_7 = sub(UInt<6>("h20"), UInt<1>("h1")) @[GCD.scala 51:48]
    node _T_8 = tail(_T_7, 1) @[GCD.scala 51:48]
    node _T_9 = dshr(rd_ptr, _T_8) @[GCD.scala 51:42]
    node _T_10 = bits(_T_9, 0, 0) @[GCD.scala 51:42]
    node _T_11 = sub(UInt<6>("h20"), UInt<1>("h1")) @[GCD.scala 51:72]
    node _T_12 = tail(_T_11, 1) @[GCD.scala 51:72]
    node _T_13 = dshr(wr_ptr_r, _T_12) @[GCD.scala 51:66]
    node _T_14 = bits(_T_13, 0, 0) @[GCD.scala 51:66]
    node _T_15 = eq(_T_10, _T_14) @[GCD.scala 51:54]
    node _T_16 = and(_T_6, _T_15) @[GCD.scala 51:32]
    when _T_16 : @[GCD.scala 51:79]
      rd_empty <= UInt<1>("h0") @[GCD.scala 52:16]
    else :
      rd_empty <= UInt<1>("h1") @[GCD.scala 54:16]
    node _T_17 = eq(io.read.valid, UInt<1>("h1")) @[GCD.scala 57:26]
    node _T_18 = neq(rd_empty, UInt<1>("h1")) @[GCD.scala 57:51]
    node _T_19 = and(_T_17, _T_18) @[GCD.scala 57:38]
    when _T_19 : @[GCD.scala 57:63]
      rd_en <= UInt<1>("h1") @[GCD.scala 58:13]
    else :
      rd_en <= UInt<1>("h0") @[GCD.scala 60:13]
    node _T_20 = sub(UInt<6>("h20"), UInt<1>("h1")) @[GCD.scala 65:25]
    node _T_21 = tail(_T_20, 1) @[GCD.scala 65:25]
    node _T_22 = lt(wr_ptr, _T_21) @[GCD.scala 65:18]
    node _T_23 = neq(wr_full, UInt<1>("h0")) @[GCD.scala 65:43]
    node _T_24 = and(_T_22, _T_23) @[GCD.scala 65:31]
    node _T_25 = eq(wr_en, UInt<1>("h1")) @[GCD.scala 65:66]
    node _T_26 = and(_T_24, _T_25) @[GCD.scala 65:56]
    when _T_26 : @[GCD.scala 65:78]
      node _wr_ptr_T = add(wr_ptr, UInt<1>("h1")) @[GCD.scala 66:23]
      node _wr_ptr_T_1 = tail(_wr_ptr_T, 1) @[GCD.scala 66:23]
      wr_ptr <= _wr_ptr_T_1 @[GCD.scala 66:14]
    else :
      wr_ptr <= wr_ptr @[GCD.scala 68:14]
    reg rd_ptr1 : UInt, io.clk_w with :
      reset => (UInt<1>("h0"), rd_ptr1) @[GCD.scala 71:30]
    rd_ptr1 <= wr_ptr @[GCD.scala 71:30]
    reg rd_ptr_w : UInt, io.clk_w with :
      reset => (UInt<1>("h0"), rd_ptr_w) @[GCD.scala 72:27]
    rd_ptr_w <= rd_ptr1 @[GCD.scala 72:27]
    node _T_27 = leq(wr_ptr, rd_ptr_w) @[GCD.scala 73:18]
    node _T_28 = sub(UInt<6>("h20"), UInt<1>("h1")) @[GCD.scala 73:47]
    node _T_29 = tail(_T_28, 1) @[GCD.scala 73:47]
    node _T_30 = dshr(wr_ptr, _T_29) @[GCD.scala 73:41]
    node _T_31 = bits(_T_30, 0, 0) @[GCD.scala 73:41]
    node _T_32 = sub(UInt<6>("h20"), UInt<1>("h1")) @[GCD.scala 73:71]
    node _T_33 = tail(_T_32, 1) @[GCD.scala 73:71]
    node _T_34 = dshr(rd_ptr_w, _T_33) @[GCD.scala 73:65]
    node _T_35 = bits(_T_34, 0, 0) @[GCD.scala 73:65]
    node _T_36 = eq(_T_31, _T_35) @[GCD.scala 73:53]
    node _T_37 = and(_T_27, _T_36) @[GCD.scala 73:31]
    when _T_37 : @[GCD.scala 73:80]
      wr_full <= UInt<1>("h1") @[GCD.scala 74:15]
    else :
      wr_full <= UInt<1>("h0") @[GCD.scala 76:15]
    node _T_38 = neq(wr_full, UInt<1>("h1")) @[GCD.scala 79:20]
    node _T_39 = eq(io.write.valid, UInt<1>("h1")) @[GCD.scala 79:51]
    node _T_40 = and(_T_38, _T_39) @[GCD.scala 79:32]
    when _T_40 : @[GCD.scala 79:64]
      wr_en <= UInt<1>("h1") @[GCD.scala 80:13]
    else :
      wr_en <= UInt<1>("h0") @[GCD.scala 82:13]
    inst DataConverter of BinToGray @[GCD.scala 88:31]
    DataConverter.clock <= io.clk_w
    DataConverter.reset <= reset
    DataConverter.io.bin <= io.write.bits @[GCD.scala 89:26]
    node _T_41 = eq(wr_en, UInt<1>("h1")) @[GCD.scala 90:17]
    node _T_42 = neq(wr_full, UInt<1>("h1")) @[GCD.scala 90:41]
    node _T_43 = and(_T_41, _T_42) @[GCD.scala 90:29]
    when _T_43 : @[GCD.scala 90:55]
      node _T_44 = or(wr_ptr, UInt<3>("h0"))
      node _T_45 = bits(_T_44, 2, 0)
      write mport MPORT_8 = mem[_T_45], io.clk_w
      MPORT_8 <= DataConverter.io.gray
    else :
      wr_ptr <= wr_ptr @[GCD.scala 93:14]
    inst DataConverter_1 of GrayToBin @[GCD.scala 98:31]
    DataConverter_1.clock <= io.clk_r
    DataConverter_1.reset <= reset
    DataConverter_1.io.gray <= io.read.bits @[GCD.scala 99:27]
    node _T_46 = eq(rd_en, UInt<1>("h1")) @[GCD.scala 100:18]
    node _T_47 = neq(rd_empty, UInt<1>("h1")) @[GCD.scala 100:43]
    node _T_48 = and(_T_46, _T_47) @[GCD.scala 100:30]
    when _T_48 : @[GCD.scala 100:55]
      node _io_read_bits_T = or(rd_ptr, UInt<3>("h0")) @[GCD.scala 101:31]
      node _io_read_bits_T_1 = bits(_io_read_bits_T, 2, 0) @[GCD.scala 101:31]
      read mport io_read_bits_MPORT = mem[_io_read_bits_T_1], io.clk_r @[GCD.scala 101:31]
      io.read.bits <= io_read_bits_MPORT @[GCD.scala 101:20]
    else :
      node _io_read_bits_T_2 = sub(rd_ptr, UInt<1>("h1")) @[GCD.scala 103:40]
      node _io_read_bits_T_3 = tail(_io_read_bits_T_2, 1) @[GCD.scala 103:40]
      node _io_read_bits_T_4 = or(_io_read_bits_T_3, UInt<3>("h0")) @[GCD.scala 103:31]
      node _io_read_bits_T_5 = bits(_io_read_bits_T_4, 2, 0) @[GCD.scala 103:31]
      read mport io_read_bits_MPORT_1 = mem[_io_read_bits_T_5], io.clk_r @[GCD.scala 103:31]
      io.read.bits <= io_read_bits_MPORT_1 @[GCD.scala 103:20]

